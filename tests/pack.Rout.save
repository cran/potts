
R version 2.9.0 (2009-04-17)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(potts)
> 
> set.seed(42)
> 
> ncolor <- as.integer(2)
> nrow <- sample(100:200, 1)
> ncol <- sample(100:200, 1)
> x <- matrix(sample(ncolor, nrow * ncol, replace = TRUE), nrow = nrow)
> foo <- packPotts(x, ncolor)
> foo[2] == 3 # log2pixelsperbyte
[1] TRUE
> bar <- inspectPotts(foo)
> identical(nrow, bar$nrow)
[1] TRUE
> identical(ncol, bar$ncol)
[1] TRUE
> identical(ncolor, bar$ncolor)
[1] TRUE
> baz <- unpackPotts(foo)
> identical(x, baz)
[1] TRUE
> 
> ncolor <- as.integer(3)
> nrow <- sample(100:200, 1)
> ncol <- sample(100:200, 1)
> x <- matrix(sample(ncolor, nrow * ncol, replace = TRUE), nrow = nrow)
> foo <- packPotts(x, ncolor)
> foo[2] == 2 # log2pixelsperbyte
[1] TRUE
> bar <- inspectPotts(foo)
> identical(nrow, bar$nrow)
[1] TRUE
> identical(ncol, bar$ncol)
[1] TRUE
> identical(ncolor, bar$ncolor)
[1] TRUE
> baz <- unpackPotts(foo)
> identical(x, baz)
[1] TRUE
> 
> ncolor <- as.integer(4)
> nrow <- sample(100:200, 1)
> ncol <- sample(100:200, 1)
> x <- matrix(sample(ncolor, nrow * ncol, replace = TRUE), nrow = nrow)
> foo <- packPotts(x, ncolor)
> foo[2] == 2 # log2pixelsperbyte
[1] TRUE
> bar <- inspectPotts(foo)
> identical(nrow, bar$nrow)
[1] TRUE
> identical(ncol, bar$ncol)
[1] TRUE
> identical(ncolor, bar$ncolor)
[1] TRUE
> baz <- unpackPotts(foo)
> identical(x, baz)
[1] TRUE
> 
> ncolor <- as.integer(5)
> nrow <- sample(100:200, 1)
> ncol <- sample(100:200, 1)
> x <- matrix(sample(ncolor, nrow * ncol, replace = TRUE), nrow = nrow)
> foo <- packPotts(x, ncolor)
> foo[2] == 1 # log2pixelsperbyte
[1] TRUE
> bar <- inspectPotts(foo)
> identical(nrow, bar$nrow)
[1] TRUE
> identical(ncol, bar$ncol)
[1] TRUE
> identical(ncolor, bar$ncolor)
[1] TRUE
> baz <- unpackPotts(foo)
> identical(x, baz)
[1] TRUE
> 
> ncolor <- as.integer(17)
> nrow <- sample(100:200, 1)
> ncol <- sample(100:200, 1)
> x <- matrix(sample(ncolor, nrow * ncol, replace = TRUE), nrow = nrow)
> foo <- packPotts(x, ncolor)
> foo[2] == 0 # log2pixelsperbyte
[1] TRUE
> bar <- inspectPotts(foo)
> identical(nrow, bar$nrow)
[1] TRUE
> identical(ncol, bar$ncol)
[1] TRUE
> identical(ncolor, bar$ncolor)
[1] TRUE
> baz <- unpackPotts(foo)
> identical(x, baz)
[1] TRUE
> 
> ncolor <- as.integer(256)
> nrow <- sample(100:200, 1)
> ncol <- sample(100:200, 1)
> x <- matrix(sample(ncolor, nrow * ncol, replace = TRUE), nrow = nrow)
> foo <- packPotts(x, ncolor)
> foo[2] == 0 # log2pixelsperbyte
[1] TRUE
> bar <- inspectPotts(foo)
> identical(nrow, bar$nrow)
[1] TRUE
> identical(ncol, bar$ncol)
[1] TRUE
> identical(ncolor, bar$ncolor)
[1] TRUE
> baz <- unpackPotts(foo)
> identical(x, baz)
[1] TRUE
> 
> ncolor <- as.integer(257)
> nrow <- sample(100:200, 1)
> ncol <- sample(100:200, 1)
> x <- matrix(sample(ncolor, nrow * ncol, replace = TRUE), nrow = nrow)
> try(foo <- packPotts(x, ncolor)) # should fail
Error : 2 <= ncolor && ncolor <= 256 is not TRUE
> 
> 
